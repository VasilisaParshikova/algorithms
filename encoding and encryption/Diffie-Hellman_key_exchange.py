# Обмен ключами Диффи-Хеллмана – это отличное введение в криптографию. Если конкретизировать,
# то он работает путем объединения открытых и закрытых ключей (которые представляют из себя очень длинные числа)
# для шифрования информации, передаваемой между двумя различными сторонами.


# Основные шаги обмена ключами Диффи-Хеллмана:
# Общие параметры:
#
# Простое число p: Обе стороны договариваются о большом простом числе.
# Порождающий элемент g: Обе стороны договариваются о числе g, которое является первообразным корнем по модулю p.

# Генерация частных и публичных ключей:
#
# Частные ключи a и b: Каждый участник выбирает свое частное число (секрет) a и b.
# Публичные ключи A и B: Участники вычисляют публичные значения

# Обмен публичными ключами:

# Участники обмениваются публичными ключами A и B.

# Вычисление общего секрета:
#
# Каждая сторона вычисляет общий секретный ключ.
# Этот общий секретный ключ s является идентичным для обеих сторон и может быть использован для дальнейшего
# шифрования сообщений.


import random

def generate_private_key(p):
    """Генерирует частный ключ, который является случайным числом от 1 до p-1"""
    return random.randint(1, p-1)

def calculate_public_key(p, g, private_key):
    """Вычисляет публичный ключ на основе частного ключа"""
    return pow(g, private_key, p)  # Вычисление (g ** private_key) % p

def calculate_shared_secret(p, public_key, private_key):
    """Вычисляет общий секрет на основе публичного и частного ключей"""
    return pow(public_key, private_key, p)

# Пример использования
if __name__ == "__main__":
    # Общие параметры (простое число и порождающий элемент)
    p = 23  # Простое число (обычно большое)
    g = 5   # Порождающий элемент (первый корень по модулю p)

    # Генерация частных ключей для обеих сторон
    alice_private_key = generate_private_key(p)
    bob_private_key = generate_private_key(p)

    # Вычисление публичных ключей
    alice_public_key = calculate_public_key(p, g, alice_private_key)
    bob_public_key = calculate_public_key(p, g, bob_private_key)

    print("Простое число (p):", p)
    print("Порождающий элемент (g):", g)
    print("Частный ключ Алисы:", alice_private_key)
    print("Публичный ключ Алисы:", alice_public_key)
    print("Частный ключ Боба:", bob_private_key)
    print("Публичный ключ Боба:", bob_public_key)

    # Обмен публичными ключами и вычисление общего секрета
    alice_shared_secret = calculate_shared_secret(p, bob_public_key, alice_private_key)
    bob_shared_secret = calculate_shared_secret(p, alice_public_key, bob_private_key)

    print("Общий секрет Алисы:", alice_shared_secret)
    print("Общий секрет Боба:", bob_shared_secret)

    # Проверка, что общий секрет совпадает
    assert alice_shared_secret == bob_shared_secret, "Общий секрет не совпадает!"
