# Основное назначение связного списка — предоставление механизма для хранения и доступа к произвольному количеству
# данных. Как следует из названия, это достигается связыванием данных вместе в список.

# Если нам нужна коллекция, которая позволяет добавить произвольное число элементов и перебрать их в порядке добавления.
# Размер коллекции должен быть неограничен, а произвольный доступ нам не нужен. Нам нужен связный список

'''
Разница между встроенной структурой list в Python и связным списком (linked list) значительна,
и они имеют разные особенности и области применения. Вот основные различия:

Python List (Встроенный Список)

В Python встроенные списки реализованы как динамические массивы.
Это означает, что они используют непрерывный блок памяти, и каждый элемент в списке занимает определенное
количество памяти.

Операции доступа к элементам по индексу выполняются за постоянное время O(1),
так как элементы расположены последовательно в памяти.

Добавление элементов в конец списка выполняется за амортизированное время O(1), но вставка или удаление элементов в
середине списка занимает O(n) времени, так как требуется перемещение элементов.

Использует больше памяти, чем требуется для хранения элементов, чтобы иметь возможность роста без
частого перераспределения памяти.

Связный список (Linked List)

Связный список состоит из узлов, каждый из которых содержит элемент данных и указатель (ссылку) на следующий узел в
списке. Узлы могут быть разбросаны по памяти.

Операции доступа к элементам по индексу требуют O(n) времени, так как для доступа к i-му элементу необходимо пройти
через i узлов.

Добавление или удаление элементов (при известных ссылках на узлы) выполняется за O(1) времени, так как требуется
изменить только ссылки соседних узлов.

Использует больше памяти на каждый элемент из-за дополнительных ссылок (на предыдущий и/или следующий узел),
но эффективен для операций вставки/удаления.
'''

class Node:
    """Класс узла связного списка"""
    def __init__(self, data=None):
        self.data = data  # Данные узла
        self.next = None  # Ссылка на следующий узел

class LinkedList:
    """Класс односвязного списка"""
    def __init__(self):
        self.head = None  # Изначально список пуст

    def append(self, data):
        """Метод для добавления элемента в конец списка"""
        new_node = Node(data)
        if not self.head:  # Если список пуст, новый узел становится головой
            self.head = new_node
            return
        last = self.head
        while last.next:  # Ищем последний узел
            last = last.next
        last.next = new_node  # Добавляем новый узел в конец

    def display(self):
        """Метод для отображения элементов списка"""
        elements = []
        current = self.head
        while current:
            elements.append(current.data)
            current = current.next
        print("Список:", elements)

# Пример использования
linked_list = LinkedList()
linked_list.append(1)
linked_list.append(2)
linked_list.append(3)
linked_list.display()  # Вывод: Список: [1, 2, 3]

