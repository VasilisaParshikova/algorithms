# Описание алгоритма
# Находится средний элемент последовательности.
#   Для этого первый и последний индексы связываются с переменными, а индекс среднего элемента вычисляется.
# Значение среднего элемента сравнивается с искомым значением.
#   Если значение среднего элемента оказывается равным искомому, поиск завершается.
# Иначе, в зависимости от того, искомое значение больше или меньше значения среднего элемента,
#   дальнейший поиск будет происходить только в левой или только в правой половинах массива.
# Для этого одна из границ исследуемой последовательности сдвигается.
#   Если искомое значение больше значения среднего элемента, то нижняя граница сдвигается за средний элемент
#   на один элемент справа. Если искомое значение меньше значения среднего элемента, то верхняя граница
#   сдвигается на элемент перед средним.
# Снова находится средний элемент теперь уже в выбранной половине. Описанный выше алгоритм повторяется для данного среза

from random import randint

# создание списка, его сортировка по возрастанию и вывод на экран
a = []
for i in range(10):
    a.append(randint(1, 50))
a.sort()
print(a)

# искомое число
value = int(input("Введите искомый элемент. "))

# индексы первого элемента, последнего и среднего
low = 0
high = len(a) - 1
mid = len(a) // 2

while a[mid] != value and low <= high:
    if value > a[mid]:
        low = mid + 1
    else:
        high = mid - 1
    mid = (low + high) // 2

if low > high:
    print('No value')
else:
    print('ID =', mid)

### ещё решение

from random import randint

a = [randint(1, 50) for i in range(10)]
a.sort()
print(a)

value = int(input("Введите искомый элемент. "))

left = 0
right = len(a) - 1

while left <= right:
    center = (left + right) // 2
    if value == a[center]:
        print('ID =', center)
        break
    if value > a[center]:
        left = center + 1
    else:
        right = center - 1
else:
    print('No value')